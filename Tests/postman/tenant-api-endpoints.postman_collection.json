{
  "info": {
    "name": "Tenant API Endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testTenantId",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Pre-request Script to auto-generate test data if not already set",
          "if (!pm.collectionVariables.get(\"testTenantId\")) {",
          "    // Generate a unique ID for test tenant",
          "    const testId = \"test_\" + Date.now();",
          "    pm.collectionVariables.set(\"testTenantId\", testId);",
          "    pm.collectionVariables.set(\"testTenantName\", \"Test Tenant \" + testId);",
          "    pm.collectionVariables.set(\"testTenantDomain\", testId + \".example.com\");",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Get All Tenants",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Tenants have required properties\", function () {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        pm.expect(jsonData[0]).to.have.property('id');",
              "        pm.expect(jsonData[0]).to.have.property('tenantId');",
              "        pm.expect(jsonData[0]).to.have.property('name');",
              "        pm.expect(jsonData[0]).to.have.property('domain');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Tenant by ID",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants/:id",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "{{newTenantId}}",
              "description": "The ID of the tenant to fetch"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Tenant has correct structure\", function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('id');",
              "        pm.expect(jsonData).to.have.property('tenantId');",
              "        pm.expect(jsonData).to.have.property('name');",
              "        pm.expect(jsonData).to.have.property('domain');",
              "        pm.expect(jsonData).to.have.property('createdAt');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Tenant By TenantId",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants/by-tenant-id/:tenantId",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants", "by-tenant-id", ":tenantId"],
          "variable": [
            {
              "key": "tenantId",
              "value": "{{testTenantId}}",
              "description": "The tenant ID to look up"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Tenant has correct structure\", function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('id');",
              "        pm.expect(jsonData).to.have.property('tenantId');",
              "        pm.expect(jsonData.tenantId).to.eql(pm.variables.get(\"testTenantId\"));",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Tenant By Domain",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants/by-domain/:domain",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants", "by-domain", ":domain"],
          "variable": [
            {
              "key": "domain",
              "value": "{{testTenantDomain}}",
              "description": "The domain to look up"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 404\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Tenant has correct structure\", function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData).to.have.property('id');",
              "        pm.expect(jsonData).to.have.property('domain');",
              "        pm.expect(jsonData.domain).to.eql(pm.variables.get(\"testTenantDomain\"));",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Tenant",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"tenantId\": \"{{testTenantId}}\",\n    \"name\": \"{{testTenantName}}\",\n    \"domain\": \"{{testTenantDomain}}\",\n    \"description\": \"Test tenant created by Postman\",\n    \"logo\": {\n        \"url\": \"https://example.com/logo.png\",\n        \"width\": 200,\n        \"height\": 200\n    },\n    \"timezone\": \"UTC\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Tenant was created with correct details\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.tenantId).to.eql(pm.collectionVariables.get(\"testTenantId\"));",
              "    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"testTenantName\"));",
              "    pm.expect(jsonData.domain).to.eql(pm.collectionVariables.get(\"testTenantDomain\"));",
              "    ",
              "    // Store the ID for use in other requests",
              "    pm.collectionVariables.set(\"newTenantId\", jsonData.id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Tenant",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"{{testTenantName}} Updated\",\n    \"description\": \"Updated description for test tenant\",\n    \"timezone\": \"America/New_York\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants/:id",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "{{newTenantId}}",
              "description": "The ID of the tenant to update"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Tenant was updated with new values\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"newTenantId\"));",
              "    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"testTenantName\") + \" Updated\");",
              "    pm.expect(jsonData.description).to.eql(\"Updated description for test tenant\");",
              "    pm.expect(jsonData.timezone).to.eql(\"America/New_York\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Tenant",
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "X-Tenant-Id",
            "value": "{{tenantId}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/client/tenants/:id",
          "host": ["{{baseUrl}}"],
          "path": ["api", "client", "tenants", ":id"],
          "variable": [
            {
              "key": "id",
              "value": "{{newTenantId}}",
              "description": "The ID of the tenant to delete"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Cleanup test data\", function() {",
              "    // Clear test variables",
              "    pm.collectionVariables.unset(\"testTenantId\");",
              "    pm.collectionVariables.unset(\"testTenantName\");",
              "    pm.collectionVariables.unset(\"testTenantDomain\");",
              "    pm.collectionVariables.unset(\"newTenantId\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
} 